#include <iostream>
#include <cmath>
using namespace std;

template<typename T> class AVL
{
	class Node
	{
	public:
		T data;
		int height;
		Node* left;
		Node* right;

		Node(T data)
		{
			this->data = data;
			height = 1;
			left = right = nullptr;
		}
	};

	Node* root = nullptr;


	int getHeight(Node* node)
	{
		if (node == nullptr)
		{
			return 0;
		}
		return node->height;
	}

	int getBalanceFactor(Node* node)
	{
		if (node == nullptr)
		{
			return 0;
		}
		return getHeight(node->left) - getHeight(node->right);
	}

	Node* leftRotation(Node* node)
	{
		Node* y = node->right;
		Node* temp = y->left;

		y->left = node;
		node->right = temp;

		node->height = 1 + max(getHeight(node->left), getHeight(node->right));
		y->height = 1 + max(getHeight(y->left), getHeight(y->right));

		return y;
	}

	Node* rightRotation(Node* node)
	{
		Node* y = node->left;
		Node* temp = y->right;

		y->right = node;
		node->left = temp;

		node->height = 1 + max(getHeight(node->left), getHeight(node->right));
		y->height = 1 + max(getHeight(y->left), getHeight(y->right));

		return y;
	}

	Node* insert(T data, Node* node)
	{
		
		if(node == nullptr)
		{
			return new Node(data);
		}

		if (data < node->data)
		{
			node->left = insert(data, node->left);
		}
		else if (data > node->data)
		{
			node->right = insert(data, node->right);
		}

		node->height = 1 + max(getHeight(node->left), getHeight(node->right));
		//cout << getBalanceFactor(node) << endl;
		int bf = getBalanceFactor(node);

		if (bf < -1 && data > node->right->data)
		{
			return leftRotation(node);
		}
		else if (bf < -1 && data < node->right->data)
		{
			node->right = rightRotation(node->right);
			return leftRotation(node);
		}
		else if (bf > 1 && data < node->left->data)
		{
			return rightRotation(node);
		}
		else if (bf > 1 && data > node->left->data)
		{
			node->left = leftRotation(node->left);
			return rightRotation(node);
		}
		return node;
	}


	// Recursive function to delete a node 
	// with given key from subtree with 
	// given root. It returns root of the 
	// modified subtree. 


	Node* del(T data, Node* node)
	{

		// STEP 1: PERFORM STANDARD BST DELETE 
		if (node == NULL)
			return node;

		// If the key to be deleted is smaller 
		// than the root's key, then it lies
		// in left subtree 
		if (data < node->data)
			node->left = del(data, node->left);

		// If the key to be deleted is greater 
		// than the root's key, then it lies 
		// in right subtree 
		else if (data > node->data)
			node->right = del(data, node->right);

		// if key is same as root's key, then 
		// This is the node to be deleted 
		else
		{
			// node with only one child or no child 
			if ((node->left == NULL) ||
				(node->right == NULL))
			{
				Node* temp = node->left ?
					node->left :
					node->right;

				// No child case 
				if (temp == NULL)
				{
					temp = node;
					node = NULL;
				}
				else // One child case 
					*node = *temp; // Copy the contents of 
				// the non-empty child 
				delete temp;
			}
			else
			{
				// node with two children: Get the inorder 
				// successor (smallest in the right subtree) 
				Node* temp = node;

				/* loop down to find the leftmost leaf */
				while (temp->left != NULL)
					temp = temp->left;

				// Copy the inorder successor's 
				// data to this node 
				node->data = temp->data;

				// Delete the inorder successor 
				node->right = del(temp->data, node->right);
			}
		}

		// If the tree had only one node
		// then return 
		if (node == NULL)
			return node;

		// STEP 2: UPDATE HEIGHT OF THE CURRENT NODE 
		node->height = 1 + max(getHeight(node->left),
			getHeight(node->right));

		// STEP 3: GET THE BALANCE FACTOR OF 
		// THIS NODE (to check whether this 
		// node became unbalanced) 
		int balance = getBalanceFactor(node);

		// If this node becomes unbalanced, 
		// then there are 4 cases 

		// Left Left Case 
		if (balance > 1 &&
			getBalanceFactor(node->left) >= 0)
			return rightRotation(node);

		// Left Right Case 
		if (balance > 1 &&
			getBalanceFactor(node->left) < 0)
		{
			node->left = leftRotation(node->left);
			return rightRotation(node);
		}

		// Right Right Case 
		if (balance < -1 &&
			getBalanceFactor(node->right) <= 0)
			return leftRotation(node);

		// Right Left Case 
		if (balance < -1 &&
			getBalanceFactor(node->right) > 0)
		{
			node->right = rightRotation(node->right);
			return leftRotation(node);
		}
		return node;
	}

public:
	void insert(T data)
	{
		root = insert(data, root);
	}

	void del(T data)
	{
		root = del(data, root);
	}

	bool contains(T data)
	{
		Node* current = root;
		while (current != nullptr)
		{
			if (data < current->data)
				current = current->left;
			else if (data > current->data)
				current = current->right;
			else
				return true;
		}
		return false;
	}
};

int main()
{
	AVL<string> tree;
	tree.insert("B");
	tree.insert("A");
	tree.insert("C");
	tree.insert("D");
	tree.del("A");
	cout << "end";
	return 0;
}